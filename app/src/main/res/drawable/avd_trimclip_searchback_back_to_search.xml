<!-- 返回过渡到搜索 -->
<animated-vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:drawable="@drawable/vd_trimclip_searchback_back">

    <!-- 柄的过渡动画，至于为什么需要先全部显示，再截断，这部分原理我需要多做几份demo来深入了解才行。 -->
    <target android:name="stem">
        <aapt:attr name="android:animation">
            <set>
                <!-- 线条从终点增长到起点，即初始截断部分是75%（箭头柄），从终点开始逐渐缩小到起点，达到0%。全部显示 -->
                <objectAnimator
                    android:duration="450"
                    android:interpolator="@android:interpolator/fast_out_slow_in"
                    android:propertyName="trimPathStart"
                    android:valueFrom="0.75"
                    android:valueTo="0" />

                <!-- 线条从起点增长到终点，即初始截断部分是100%，从起点开始逐渐缩小到终点，达到18.5%。留下25%的箭头柄  -->
                <objectAnimator
                    android:duration="600"
                    android:interpolator="@android:interpolator/fast_out_slow_in"
                    android:propertyName="trimPathEnd"
                    android:valueFrom="1"
                    android:valueTo="0.185" />
            </set>
        </aapt:attr>
    </target>

    <!-- 圆型的过渡动画, -->
    <target android:name="search_circle">
        <aapt:attr name="android:animation">
            <set android:ordering="sequentially">
                <!-- 首先我们需要立即重置状态。 线条从起点增长到终点，即初始截断部分是100%-->
                <objectAnimator
                    android:duration="0"
                    android:propertyName="trimPathEnd"
                    android:valueFrom="0"
                    android:valueTo="0" />

                <!-- 然后在延迟之后运行动画。线条从起点增长到终点，即初始截断部分是100%，300毫秒显示圆型 -->
                <objectAnimator
                    android:duration="250"
                    android:interpolator="@android:interpolator/fast_out_slow_in"
                    android:propertyName="trimPathEnd"
                    android:startOffset="300"
                    android:valueFrom="0"
                    android:valueTo="1" />
            </set>
        </aapt:attr>
    </target>

    <!-- 上部分箭头 -->
    <target android:name="arrow_head_top">
        <aapt:attr name="android:animation">
            <!-- 线条从终点缩短到起点，即初始截断部分是0%，从终点开始逐渐扩大到起点，达到100%。 -->
            <objectAnimator
                android:duration="250"
                android:interpolator="@android:interpolator/fast_out_slow_in"
                android:propertyName="trimPathEnd"
                android:valueFrom="1"
                android:valueTo="0" />
        </aapt:attr>

    </target>

    <!-- 下部分箭头 -->
    <target android:name="arrow_head_bottom">
        <aapt:attr name="android:animation">
            <!-- 线条从终点缩短到起点，即初始截断部分是0%，从终点开始逐渐扩大到起点，达到100%。 -->
            <objectAnimator
                android:duration="250"
                android:interpolator="@android:interpolator/fast_out_slow_in"
                android:propertyName="trimPathEnd"
                android:valueFrom="1"
                android:valueTo="0" />
        </aapt:attr>

    </target>

    <!-- 整个箭头部分，配合https://www.androiddesignpatterns.com/2016/11/introduction-to-icon-animation-techniques.html的慢动作食用效果更佳 -->
    <target android:name="arrow_head">
        <aapt:attr name="android:animation">
            <set>
                <!-- 首先我们需要立即重置状态：x轴瞬间回到0点 -->
                <objectAnimator
                    android:duration="0"
                    android:propertyName="translateX"
                    android:valueFrom="0"
                    android:valueTo="0" />

                <!-- 然后在延迟之后运行动画：移动到24，arrow_head_top和arrow_head_bottom负责消失 -->
                <objectAnimator
                    android:duration="250"
                    android:interpolator="@android:interpolator/fast_out_linear_in"
                    android:propertyName="translateX"
                    android:valueFrom="0"
                    android:valueTo="24" />
            </set>
        </aapt:attr>
    </target>

</animated-vector>